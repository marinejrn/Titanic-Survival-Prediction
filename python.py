{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 652,
   "id": "fb007c76",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "\n",
    "from math import sqrt\n",
    "import matplotlib.pyplot as plt \n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn import preprocessing\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 677,
   "id": "73ce2550",
   "metadata": {},
   "outputs": [],
   "source": [
    "data=pd.read_csv(\"train.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 678,
   "id": "5e0a39f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 678,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 679,
   "id": "10af7d50",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>257.353842</td>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>223.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
       "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
       "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
       "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
       "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
       "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
       "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
       "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
       "\n",
       "            Parch        Fare  \n",
       "count  891.000000  891.000000  \n",
       "mean     0.381594   32.204208  \n",
       "std      0.806057   49.693429  \n",
       "min      0.000000    0.000000  \n",
       "25%      0.000000    7.910400  \n",
       "50%      0.000000   14.454200  \n",
       "75%      0.000000   31.000000  \n",
       "max      6.000000  512.329200  "
      ]
     },
     "execution_count": 679,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 680,
   "id": "143287e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 681,
   "id": "97a74cff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "177"
      ]
     },
     "execution_count": 681,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.Age.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 682,
   "id": "015c2483",
   "metadata": {},
   "outputs": [],
   "source": [
    "def PrepData(data) :\n",
    "    data['Age'].fillna(data['Age'].mean(), inplace=True)\n",
    "    data['Embarked'].fillna(data['Embarked'].mode()[0], inplace=True)\n",
    "    data['Fare'].fillna(data['Fare'].mode()[0], inplace=True)\n",
    "    data['Sex'] = data['Sex'].replace({'female': 0, 'male': 1})\n",
    "    data['Total_family'] = data['Parch'] + data['SibSp']\n",
    "    data = data.astype({'Total_family': 'int8'})\n",
    "    data = pd.get_dummies(data, columns=['Embarked'])\n",
    "\n",
    "    x = data[['Age']]\n",
    "    standard_normalization = preprocessing.StandardScaler()\n",
    "    res = standard_normalization.fit_transform(x)\n",
    "    data['Age']=res\n",
    "\n",
    "    x = data[['Fare']]\n",
    "    standard_normalization = preprocessing.StandardScaler()\n",
    "    res = standard_normalization.fit_transform(x)\n",
    "    data['Fare']=res\n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 683,
   "id": "ed532953",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 15 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   PassengerId   891 non-null    int64  \n",
      " 1   Survived      891 non-null    int64  \n",
      " 2   Pclass        891 non-null    int64  \n",
      " 3   Name          891 non-null    object \n",
      " 4   Sex           891 non-null    int64  \n",
      " 5   Age           891 non-null    float64\n",
      " 6   SibSp         891 non-null    int64  \n",
      " 7   Parch         891 non-null    int64  \n",
      " 8   Ticket        891 non-null    object \n",
      " 9   Fare          891 non-null    float64\n",
      " 10  Cabin         204 non-null    object \n",
      " 11  Total_family  891 non-null    int8   \n",
      " 12  Embarked_C    891 non-null    uint8  \n",
      " 13  Embarked_Q    891 non-null    uint8  \n",
      " 14  Embarked_S    891 non-null    uint8  \n",
      "dtypes: float64(2), int64(6), int8(1), object(3), uint8(3)\n",
      "memory usage: 80.2+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Total_family</th>\n",
       "      <th>Embarked_C</th>\n",
       "      <th>Embarked_Q</th>\n",
       "      <th>Embarked_S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.592481</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>-0.502445</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.638789</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>0.786845</td>\n",
       "      <td>C85</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.284663</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>-0.488854</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>0</td>\n",
       "      <td>0.407926</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>0.420730</td>\n",
       "      <td>C123</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>1</td>\n",
       "      <td>0.407926</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>-0.486337</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name  Sex       Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    1 -0.592481      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...    0  0.638789      1   \n",
       "2                             Heikkinen, Miss. Laina    0 -0.284663      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)    0  0.407926      1   \n",
       "4                           Allen, Mr. William Henry    1  0.407926      0   \n",
       "\n",
       "   Parch            Ticket      Fare Cabin  Total_family  Embarked_C  \\\n",
       "0      0         A/5 21171 -0.502445   NaN             1           0   \n",
       "1      0          PC 17599  0.786845   C85             1           1   \n",
       "2      0  STON/O2. 3101282 -0.488854   NaN             0           0   \n",
       "3      0            113803  0.420730  C123             1           0   \n",
       "4      0            373450 -0.486337   NaN             0           0   \n",
       "\n",
       "   Embarked_Q  Embarked_S  \n",
       "0           0           1  \n",
       "1           0           0  \n",
       "2           0           1  \n",
       "3           0           1  \n",
       "4           0           1  "
      ]
     },
     "execution_count": 683,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data=PrepData(data)\n",
    "data.info()\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 684,
   "id": "b4550c8d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "correlation_matrix = data.corr()\n",
    "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=\".2f\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9f13f41",
   "metadata": {},
   "source": [
    "On voit que les caracteristiques Fare, Pclass et Sex influencent le taux de survie du passager. Les autres caractéristiques sont plutôt neutres. Nous allons toutes les garder sauf le passenger ID."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 685,
   "id": "9f2c913d",
   "metadata": {},
   "outputs": [],
   "source": [
    "del data['Name']\n",
    "del data['PassengerId']\n",
    "del data['Ticket']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 686,
   "id": "32fb6429",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   Survived      891 non-null    int64  \n",
      " 1   Pclass        891 non-null    int64  \n",
      " 2   Sex           891 non-null    int64  \n",
      " 3   Age           891 non-null    float64\n",
      " 4   SibSp         891 non-null    int64  \n",
      " 5   Parch         891 non-null    int64  \n",
      " 6   Fare          891 non-null    float64\n",
      " 7   Cabin         204 non-null    object \n",
      " 8   Total_family  891 non-null    int8   \n",
      " 9   Embarked_C    891 non-null    uint8  \n",
      " 10  Embarked_Q    891 non-null    uint8  \n",
      " 11  Embarked_S    891 non-null    uint8  \n",
      "dtypes: float64(2), int64(5), int8(1), object(1), uint8(3)\n",
      "memory usage: 59.3+ KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 692,
   "id": "4438df96",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = data[['Pclass', 'Sex', 'Age', 'Total_family', 'Fare','Embarked_C','Embarked_Q','Embarked_S']]  # Colonnes à utiliser pour prédire\n",
    "y = data['Survived']  # Cible : 'Survived'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 688,
   "id": "f7a354bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 689,
   "id": "29bc2850",
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = StandardScaler()\n",
    "X_train = scaler.fit_transform(X_train)\n",
    "X_test = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 690,
   "id": "6248ca40",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Précision du modèle : 79.33%\n"
     ]
    }
   ],
   "source": [
    "model = LogisticRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f\"Précision du modèle : {accuracy*100:.2f}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 691,
   "id": "f7a884cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Précision du modèle pour l'exécution 1: 81.01%\n",
      "Précision du modèle pour l'exécution 2: 79.89%\n",
      "Précision du modèle pour l'exécution 3: 78.21%\n",
      "Précision du modèle pour l'exécution 4: 76.54%\n",
      "Précision du modèle pour l'exécution 5: 83.24%\n",
      "Précision du modèle pour l'exécution 6: 80.45%\n",
      "Précision du modèle pour l'exécution 7: 87.15%\n",
      "Précision du modèle pour l'exécution 8: 75.98%\n",
      "Précision du modèle pour l'exécution 9: 75.42%\n",
      "Précision du modèle pour l'exécution 10: 76.54%\n",
      "Précision du modèle pour l'exécution 11: 82.12%\n",
      "Précision du modèle pour l'exécution 12: 86.59%\n",
      "Précision du modèle pour l'exécution 13: 79.33%\n",
      "Précision du modèle pour l'exécution 14: 84.36%\n",
      "Précision du modèle pour l'exécution 15: 80.45%\n",
      "Précision du modèle pour l'exécution 16: 81.56%\n",
      "Précision du modèle pour l'exécution 17: 73.74%\n",
      "Précision du modèle pour l'exécution 18: 77.65%\n",
      "Précision du modèle pour l'exécution 19: 84.92%\n",
      "Précision du modèle pour l'exécution 20: 83.24%\n",
      "Précision du modèle pour l'exécution 21: 82.12%\n",
      "Précision du modèle pour l'exécution 22: 80.45%\n",
      "Précision du modèle pour l'exécution 23: 77.09%\n",
      "Précision du modèle pour l'exécution 24: 75.42%\n",
      "Précision du modèle pour l'exécution 25: 83.80%\n",
      "Précision du modèle pour l'exécution 26: 79.89%\n",
      "Précision du modèle pour l'exécution 27: 82.12%\n",
      "Précision du modèle pour l'exécution 28: 82.12%\n",
      "Précision du modèle pour l'exécution 29: 79.89%\n",
      "Précision du modèle pour l'exécution 30: 77.65%\n",
      "Précision du modèle pour l'exécution 31: 79.33%\n",
      "Précision du modèle pour l'exécution 32: 81.01%\n",
      "Précision du modèle pour l'exécution 33: 78.21%\n",
      "Précision du modèle pour l'exécution 34: 80.45%\n",
      "Précision du modèle pour l'exécution 35: 82.68%\n",
      "Précision du modèle pour l'exécution 36: 79.33%\n",
      "Précision du modèle pour l'exécution 37: 80.45%\n",
      "Précision du modèle pour l'exécution 38: 79.89%\n",
      "Précision du modèle pour l'exécution 39: 84.36%\n",
      "Précision du modèle pour l'exécution 40: 78.21%\n",
      "Précision du modèle pour l'exécution 41: 81.56%\n",
      "Précision du modèle pour l'exécution 42: 81.56%\n",
      "Précision du modèle pour l'exécution 43: 80.45%\n",
      "Précision du modèle pour l'exécution 44: 73.74%\n",
      "Précision du modèle pour l'exécution 45: 74.86%\n",
      "Précision du modèle pour l'exécution 46: 83.80%\n",
      "Précision du modèle pour l'exécution 47: 83.80%\n",
      "Précision du modèle pour l'exécution 48: 81.01%\n",
      "Précision du modèle pour l'exécution 49: 78.77%\n",
      "Précision du modèle pour l'exécution 50: 82.12%\n",
      "Précision du modèle pour l'exécution 51: 79.89%\n",
      "Précision du modèle pour l'exécution 52: 77.65%\n",
      "Précision du modèle pour l'exécution 53: 81.56%\n",
      "Précision du modèle pour l'exécution 54: 78.21%\n",
      "Précision du modèle pour l'exécution 55: 78.77%\n",
      "Précision du modèle pour l'exécution 56: 77.09%\n",
      "Précision du modèle pour l'exécution 57: 83.24%\n",
      "Précision du modèle pour l'exécution 58: 78.77%\n",
      "Précision du modèle pour l'exécution 59: 79.89%\n",
      "Précision du modèle pour l'exécution 60: 73.18%\n",
      "Précision du modèle pour l'exécution 61: 77.09%\n",
      "Précision du modèle pour l'exécution 62: 79.33%\n",
      "Précision du modèle pour l'exécution 63: 81.01%\n",
      "Précision du modèle pour l'exécution 64: 81.01%\n",
      "Précision du modèle pour l'exécution 65: 82.68%\n",
      "Précision du modèle pour l'exécution 66: 79.89%\n",
      "Précision du modèle pour l'exécution 67: 77.65%\n",
      "Précision du modèle pour l'exécution 68: 79.89%\n",
      "Précision du modèle pour l'exécution 69: 82.12%\n",
      "Précision du modèle pour l'exécution 70: 81.01%\n",
      "Précision du modèle pour l'exécution 71: 83.80%\n",
      "Précision du modèle pour l'exécution 72: 81.56%\n",
      "Précision du modèle pour l'exécution 73: 82.12%\n",
      "Précision du modèle pour l'exécution 74: 81.56%\n",
      "Précision du modèle pour l'exécution 75: 83.24%\n",
      "Précision du modèle pour l'exécution 76: 76.54%\n",
      "Précision du modèle pour l'exécution 77: 83.80%\n",
      "Précision du modèle pour l'exécution 78: 77.09%\n",
      "Précision du modèle pour l'exécution 79: 84.36%\n",
      "Précision du modèle pour l'exécution 80: 79.89%\n",
      "Précision du modèle pour l'exécution 81: 77.09%\n",
      "Précision du modèle pour l'exécution 82: 76.54%\n",
      "Précision du modèle pour l'exécution 83: 81.01%\n",
      "Précision du modèle pour l'exécution 84: 79.33%\n",
      "Précision du modèle pour l'exécution 85: 74.86%\n",
      "Précision du modèle pour l'exécution 86: 79.33%\n",
      "Précision du modèle pour l'exécution 87: 79.33%\n",
      "Précision du modèle pour l'exécution 88: 81.01%\n",
      "Précision du modèle pour l'exécution 89: 78.21%\n",
      "Précision du modèle pour l'exécution 90: 84.92%\n",
      "Précision du modèle pour l'exécution 91: 79.89%\n",
      "Précision du modèle pour l'exécution 92: 74.86%\n",
      "Précision du modèle pour l'exécution 93: 78.77%\n",
      "Précision du modèle pour l'exécution 94: 82.68%\n",
      "Précision du modèle pour l'exécution 95: 80.45%\n",
      "Précision du modèle pour l'exécution 96: 82.12%\n",
      "Précision du modèle pour l'exécution 97: 82.12%\n",
      "Précision du modèle pour l'exécution 98: 79.33%\n",
      "Précision du modèle pour l'exécution 99: 77.65%\n",
      "Précision du modèle pour l'exécution 100: 75.42%\n",
      "Moyenne de la précision après 100 exécutions : 80.03%\n"
     ]
    }
   ],
   "source": [
    "def average_result(nb_run):\n",
    "    total_accuracy = 0\n",
    "    for i_run in range(nb_run):\n",
    "        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=i_run)  # random_state pour la reproductibilité\n",
    "        \n",
    "        scaler = StandardScaler()\n",
    "        X_train = scaler.fit_transform(X_train)\n",
    "        X_test = scaler.transform(X_test)\n",
    "        \n",
    "        model = LogisticRegression()\n",
    "        model.fit(X_train, y_train)\n",
    "\n",
    "        # Faire des prédictions\n",
    "        y_pred = model.predict(X_test)\n",
    "        \n",
    "        # Calculer la précision\n",
    "        accuracy = accuracy_score(y_test, y_pred)\n",
    "        total_accuracy += accuracy\n",
    "        \n",
    "        print(f\"Précision du modèle pour l'exécution {i_run+1}: {accuracy*100:.2f}%\")\n",
    "    \n",
    "    average_accuracy = total_accuracy / nb_run\n",
    "    print(f\"Moyenne de la précision après {nb_run} exécutions : {average_accuracy*100:.2f}%\")\n",
    "\n",
    "average_result(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 675,
   "id": "14cc04e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 418 entries, 0 to 417\n",
      "Data columns (total 11 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  418 non-null    int64  \n",
      " 1   Pclass       418 non-null    int64  \n",
      " 2   Name         418 non-null    object \n",
      " 3   Sex          418 non-null    object \n",
      " 4   Age          332 non-null    float64\n",
      " 5   SibSp        418 non-null    int64  \n",
      " 6   Parch        418 non-null    int64  \n",
      " 7   Ticket       418 non-null    object \n",
      " 8   Fare         417 non-null    float64\n",
      " 9   Cabin        91 non-null     object \n",
      " 10  Embarked     418 non-null    object \n",
      "dtypes: float64(2), int64(4), object(5)\n",
      "memory usage: 36.0+ KB\n"
     ]
    }
   ],
   "source": [
    "data=pd.read_csv(\"test.csv\")\n",
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 676,
   "id": "b54e5b50",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   PassengerId  Pclass                                          Name     Sex  \\\n",
      "0          892       3                              Kelly, Mr. James    male   \n",
      "1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n",
      "2          894       2                     Myles, Mr. Thomas Francis    male   \n",
      "3          895       3                              Wirz, Mr. Albert    male   \n",
      "4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n",
      "\n",
      "    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n",
      "0  34.5      0      0   330911   7.8292   NaN        Q  \n",
      "1  47.0      1      0   363272   7.0000   NaN        S  \n",
      "2  62.0      0      0   240276   9.6875   NaN        Q  \n",
      "3  27.0      0      0   315154   8.6625   NaN        S  \n",
      "4  22.0      1      1  3101298  12.2875   NaN        S  \n",
      "Les prédictions ont été sauvegardées dans le fichier 'predictions.csv'.\n"
     ]
    }
   ],
   "source": [
    "# Afficher les premières lignes du dataset\n",
    "print(data.head())\n",
    "   \n",
    "data=PrepData(data)\n",
    "X = data[['Pclass','Sex', 'Age', 'Total_family', 'Fare','Embarked_C','Embarked_Q','Embarked_S']]  # Colonnes à utiliser pour prédire\n",
    "X = scaler.transform(X)\n",
    "\n",
    "data['Survived'] = model.predict(X)\n",
    "\n",
    "data[['PassengerId', 'Survived']].to_csv('predictions.csv', index=False)\n",
    "\n",
    "print(\"Les prédictions ont été sauvegardées dans le fichier 'predictions.csv'.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22485f95",
   "metadata": {},
   "source": [
    "# RandomForest Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 697,
   "id": "740709aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Total_family</th>\n",
       "      <th>Embarked_C</th>\n",
       "      <th>Embarked_Q</th>\n",
       "      <th>Embarked_S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.592481</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>-0.502445</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.638789</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>0.786845</td>\n",
       "      <td>C85</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.284663</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>-0.488854</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>0</td>\n",
       "      <td>0.407926</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>0.420730</td>\n",
       "      <td>C123</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>1</td>\n",
       "      <td>0.407926</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>-0.486337</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name  Sex       Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    1 -0.592481      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...    0  0.638789      1   \n",
       "2                             Heikkinen, Miss. Laina    0 -0.284663      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)    0  0.407926      1   \n",
       "4                           Allen, Mr. William Henry    1  0.407926      0   \n",
       "\n",
       "   Parch            Ticket      Fare Cabin  Total_family  Embarked_C  \\\n",
       "0      0         A/5 21171 -0.502445   NaN             1           0   \n",
       "1      0          PC 17599  0.786845   C85             1           1   \n",
       "2      0  STON/O2. 3101282 -0.488854   NaN             0           0   \n",
       "3      0            113803  0.420730  C123             1           0   \n",
       "4      0            373450 -0.486337   NaN             0           0   \n",
       "\n",
       "   Embarked_Q  Embarked_S  \n",
       "0           0           1  \n",
       "1           0           0  \n",
       "2           0           1  \n",
       "3           0           1  \n",
       "4           0           1  "
      ]
     },
     "execution_count": 697,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "data=pd.read_csv(\"train.csv\")\n",
    "data=PrepData(data)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 698,
   "id": "5c74dbec",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = data[['Pclass','Sex', 'Age', 'Total_family', 'Fare','Embarked_S','Embarked_Q','Embarked_C']]  # Colonnes à utiliser pour prédire\n",
    "y = data['Survived']  # Cible : 'Survived'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 699,
   "id": "dbcc2f01",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Variable Importance Levels')"
      ]
     },
     "execution_count": 699,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "X= scaler.fit_transform(X)\n",
    "# Instancier et entraîner le modèle\n",
    "rf_model = RandomForestClassifier(n_estimators=100)\n",
    "rf_model.fit(X, y)\n",
    "\n",
    "Importance = pd.DataFrame({\"Importance\": rf_model.feature_importances_*100},\n",
    "                          index = ['Pclass', 'Sex', 'Age', 'Total_family', 'Fare','Embarked_S','Embarked_Q','Embarked_C'])\n",
    "Importance.sort_values(by = \"Importance\", \n",
    "                       axis = 0, \n",
    "                       ascending = True).plot(kind =\"barh\", color = \"r\")\n",
    "\n",
    "plt.xlabel(\"Variable Importance Levels\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 700,
   "id": "52a0ece4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Précision du modèle pour l'exécution 1: 82.68%\n",
      "Précision du modèle pour l'exécution 2: 77.09%\n",
      "Précision du modèle pour l'exécution 3: 81.01%\n",
      "Précision du modèle pour l'exécution 4: 79.33%\n",
      "Précision du modèle pour l'exécution 5: 81.56%\n",
      "Précision du modèle pour l'exécution 6: 83.24%\n",
      "Précision du modèle pour l'exécution 7: 83.24%\n",
      "Précision du modèle pour l'exécution 8: 77.65%\n",
      "Précision du modèle pour l'exécution 9: 80.45%\n",
      "Précision du modèle pour l'exécution 10: 77.09%\n",
      "Précision du modèle pour l'exécution 11: 81.01%\n",
      "Précision du modèle pour l'exécution 12: 84.92%\n",
      "Précision du modèle pour l'exécution 13: 77.65%\n",
      "Précision du modèle pour l'exécution 14: 82.12%\n",
      "Précision du modèle pour l'exécution 15: 80.45%\n",
      "Précision du modèle pour l'exécution 16: 78.77%\n",
      "Précision du modèle pour l'exécution 17: 76.54%\n",
      "Précision du modèle pour l'exécution 18: 81.01%\n",
      "Précision du modèle pour l'exécution 19: 84.92%\n",
      "Précision du modèle pour l'exécution 20: 86.03%\n",
      "Précision du modèle pour l'exécution 21: 81.56%\n",
      "Précision du modèle pour l'exécution 22: 82.68%\n",
      "Précision du modèle pour l'exécution 23: 79.33%\n",
      "Précision du modèle pour l'exécution 24: 77.65%\n",
      "Précision du modèle pour l'exécution 25: 81.56%\n",
      "Précision du modèle pour l'exécution 26: 77.65%\n",
      "Précision du modèle pour l'exécution 27: 81.01%\n",
      "Précision du modèle pour l'exécution 28: 83.24%\n",
      "Précision du modèle pour l'exécution 29: 78.21%\n",
      "Précision du modèle pour l'exécution 30: 79.89%\n",
      "Précision du modèle pour l'exécution 31: 81.01%\n",
      "Précision du modèle pour l'exécution 32: 81.56%\n",
      "Précision du modèle pour l'exécution 33: 79.89%\n",
      "Précision du modèle pour l'exécution 34: 81.56%\n",
      "Précision du modèle pour l'exécution 35: 84.36%\n",
      "Précision du modèle pour l'exécution 36: 81.01%\n",
      "Précision du modèle pour l'exécution 37: 82.68%\n",
      "Précision du modèle pour l'exécution 38: 79.89%\n",
      "Précision du modèle pour l'exécution 39: 83.24%\n",
      "Précision du modèle pour l'exécution 40: 78.21%\n",
      "Précision du modèle pour l'exécution 41: 82.68%\n",
      "Précision du modèle pour l'exécution 42: 80.45%\n",
      "Précision du modèle pour l'exécution 43: 83.24%\n",
      "Précision du modèle pour l'exécution 44: 80.45%\n",
      "Précision du modèle pour l'exécution 45: 71.51%\n",
      "Précision du modèle pour l'exécution 46: 83.80%\n",
      "Précision du modèle pour l'exécution 47: 82.68%\n",
      "Précision du modèle pour l'exécution 48: 76.54%\n",
      "Précision du modèle pour l'exécution 49: 78.21%\n",
      "Précision du modèle pour l'exécution 50: 85.47%\n",
      "Précision du modèle pour l'exécution 51: 78.77%\n",
      "Précision du modèle pour l'exécution 52: 81.01%\n",
      "Précision du modèle pour l'exécution 53: 78.77%\n",
      "Précision du modèle pour l'exécution 54: 78.77%\n",
      "Précision du modèle pour l'exécution 55: 79.89%\n",
      "Précision du modèle pour l'exécution 56: 79.33%\n",
      "Précision du modèle pour l'exécution 57: 79.33%\n",
      "Précision du modèle pour l'exécution 58: 83.24%\n",
      "Précision du modèle pour l'exécution 59: 79.33%\n",
      "Précision du modèle pour l'exécution 60: 80.45%\n",
      "Précision du modèle pour l'exécution 61: 82.12%\n",
      "Précision du modèle pour l'exécution 62: 79.33%\n",
      "Précision du modèle pour l'exécution 63: 80.45%\n",
      "Précision du modèle pour l'exécution 64: 82.12%\n",
      "Précision du modèle pour l'exécution 65: 81.56%\n",
      "Précision du modèle pour l'exécution 66: 82.12%\n",
      "Précision du modèle pour l'exécution 67: 83.24%\n",
      "Précision du modèle pour l'exécution 68: 78.21%\n",
      "Précision du modèle pour l'exécution 69: 78.77%\n",
      "Précision du modèle pour l'exécution 70: 82.12%\n",
      "Précision du modèle pour l'exécution 71: 77.65%\n",
      "Précision du modèle pour l'exécution 72: 82.68%\n",
      "Précision du modèle pour l'exécution 73: 79.89%\n",
      "Précision du modèle pour l'exécution 74: 84.36%\n",
      "Précision du modèle pour l'exécution 75: 86.59%\n",
      "Précision du modèle pour l'exécution 76: 78.77%\n",
      "Précision du modèle pour l'exécution 77: 82.12%\n",
      "Précision du modèle pour l'exécution 78: 80.45%\n",
      "Précision du modèle pour l'exécution 79: 80.45%\n",
      "Précision du modèle pour l'exécution 80: 79.33%\n",
      "Précision du modèle pour l'exécution 81: 80.45%\n",
      "Précision du modèle pour l'exécution 82: 74.86%\n",
      "Précision du modèle pour l'exécution 83: 79.33%\n",
      "Précision du modèle pour l'exécution 84: 82.68%\n",
      "Précision du modèle pour l'exécution 85: 75.98%\n",
      "Précision du modèle pour l'exécution 86: 78.77%\n",
      "Précision du modèle pour l'exécution 87: 87.15%\n",
      "Précision du modèle pour l'exécution 88: 79.89%\n",
      "Précision du modèle pour l'exécution 89: 78.77%\n",
      "Précision du modèle pour l'exécution 90: 84.36%\n",
      "Précision du modèle pour l'exécution 91: 80.45%\n",
      "Précision du modèle pour l'exécution 92: 83.24%\n",
      "Précision du modèle pour l'exécution 93: 81.01%\n",
      "Précision du modèle pour l'exécution 94: 84.92%\n",
      "Précision du modèle pour l'exécution 95: 82.12%\n",
      "Précision du modèle pour l'exécution 96: 82.68%\n",
      "Précision du modèle pour l'exécution 97: 78.21%\n",
      "Précision du modèle pour l'exécution 98: 79.33%\n",
      "Précision du modèle pour l'exécution 99: 78.21%\n",
      "Précision du modèle pour l'exécution 100: 79.33%\n",
      "Moyenne de la précision après 100 exécutions : 80.71%\n"
     ]
    }
   ],
   "source": [
    "def average_result(nb_run):\n",
    "    total_accuracy = 0\n",
    "    for i_run in range(nb_run):\n",
    "        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=i_run)  # random_state pour la reproductibilité\n",
    "        \n",
    "        rf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "        rf_model.fit(X_train, y_train)\n",
    "\n",
    "        # Prédictions\n",
    "        y_pred = rf_model.predict(X_test)\n",
    "    \n",
    "        # Évaluation\n",
    "        accuracy = accuracy_score(y_test, y_pred)\n",
    "        total_accuracy += accuracy\n",
    "        \n",
    "        print(f\"Précision du modèle pour l'exécution {i_run+1}: {accuracy*100:.2f}%\")\n",
    "    \n",
    "    average_accuracy = total_accuracy / nb_run\n",
    "    print(f\"Moyenne de la précision après {nb_run} exécutions : {average_accuracy*100:.2f}%\")\n",
    "\n",
    "average_result(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 701,
   "id": "46d1c60c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   PassengerId  Pclass                                          Name     Sex  \\\n",
      "0          892       3                              Kelly, Mr. James    male   \n",
      "1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n",
      "2          894       2                     Myles, Mr. Thomas Francis    male   \n",
      "3          895       3                              Wirz, Mr. Albert    male   \n",
      "4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n",
      "\n",
      "    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n",
      "0  34.5      0      0   330911   7.8292   NaN        Q  \n",
      "1  47.0      1      0   363272   7.0000   NaN        S  \n",
      "2  62.0      0      0   240276   9.6875   NaN        Q  \n",
      "3  27.0      0      0   315154   8.6625   NaN        S  \n",
      "4  22.0      1      1  3101298  12.2875   NaN        S  \n",
      "   PassengerId  Pclass                                          Name  Sex  \\\n",
      "0          892       3                              Kelly, Mr. James    1   \n",
      "1          893       3              Wilkes, Mrs. James (Ellen Needs)    0   \n",
      "2          894       2                     Myles, Mr. Thomas Francis    1   \n",
      "3          895       3                              Wirz, Mr. Albert    1   \n",
      "4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)    0   \n",
      "\n",
      "        Age  SibSp  Parch   Ticket      Fare Cabin  Total_family  Embarked_C  \\\n",
      "0  0.334993      0      0   330911 -0.497063   NaN             0           0   \n",
      "1  1.325530      1      0   363272 -0.511926   NaN             1           0   \n",
      "2  2.514175      0      0   240276 -0.463754   NaN             0           0   \n",
      "3 -0.259330      0      0   315154 -0.482127   NaN             0           0   \n",
      "4 -0.655545      1      1  3101298 -0.417151   NaN             2           0   \n",
      "\n",
      "   Embarked_Q  Embarked_S  \n",
      "0           1           0  \n",
      "1           0           1  \n",
      "2           1           0  \n",
      "3           0           1  \n",
      "4           0           1  \n",
      "Les prédictions ont été sauvegardées dans le fichier 'predictions_RF.csv'.\n"
     ]
    }
   ],
   "source": [
    "data_test=pd.read_csv(\"test.csv\")\n",
    "print(data_test.head())\n",
    "\n",
    "data_test=PrepData(data_test)\n",
    "print(data_test.head())\n",
    "\n",
    "X_test = data_test[['Pclass', 'Sex', 'Age', 'Total_family', 'Fare','Embarked_S','Embarked_Q','Embarked_C']]\n",
    "\n",
    "X_test= scaler.transform(X_test)\n",
    "\n",
    "data_test['Survived'] = rf_model.predict(X_test)\n",
    "\n",
    "data_test[['Id', 'Survived']].to_csv('predictions_RandomForest.csv', index=False)\n",
    "\n",
    "print(\"Les prédictions ont été sauvegardées dans le fichier 'predictions_RF.csv'.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7501835a",
   "metadata": {},
   "source": [
    "# XGBoost Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 575,
   "id": "57ded86f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Précision sur l'ensemble de test : 78.77%\n",
      "Les prédictions ont été sauvegardées dans le fichier 'predictions_xgb.csv'.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "import xgboost as xgb\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# Charger les données d'entraînement (train.csv)\n",
    "data_train = pd.read_csv(\"train.csv\")\n",
    "\n",
    "data_train=PrepData(data_train)\n",
    "\n",
    "# Sélectionner les caractéristiques (features) et la cible (target)\n",
    "X = data_train[['Pclass', 'Sex_female','Sex_male', 'Age', 'SibSp', 'Parch', 'Fare','Cabin','Embarked_C','Embarked_Q','Embarked_S']]\n",
    "y = data_train['Survived']\n",
    "\n",
    "# Normalisation des données\n",
    "scaler = StandardScaler()\n",
    "X = scaler.fit_transform(X)\n",
    "\n",
    "# Diviser les données en ensembles d'entraînement et de test (80% train, 20% test)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Instancier le modèle XGBoost\n",
    "xgb_model = xgb.XGBClassifier(n_estimators=100, random_state=42)\n",
    "\n",
    "# Entraîner le modèle avec les données d'entraînement\n",
    "xgb_model.fit(X_train, y_train)\n",
    "\n",
    "# Prédictions et évaluation sur l'ensemble de test\n",
    "y_pred = xgb_model.predict(X_test)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "\n",
    "print(f\"Précision sur l'ensemble de test : {accuracy*100:.2f}%\")\n",
    "\n",
    "# Pour les prédictions sur le dataset de test (test.csv)\n",
    "data_test = pd.read_csv(\"test.csv\")\n",
    "\n",
    "data_test=PrepData(data_test)\n",
    "\n",
    "# Sélectionner les mêmes caractéristiques pour la prédiction\n",
    "X_test_final = data_test[['Pclass', 'Sex_female','Sex_male', 'Age', 'SibSp', 'Parch', 'Fare','Cabin','Embarked_C','Embarked_Q','Embarked_S']]\n",
    "\n",
    "# Normaliser les données de test avec le même scaler\n",
    "X_test_final = scaler.transform(X_test_final)\n",
    "\n",
    "# Faire les prédictions\n",
    "predictions = xgb_model.predict(X_test_final)\n",
    "\n",
    "# Sauvegarder les résultats dans un fichier CSV\n",
    "output = pd.DataFrame({'PassengerId': data_test['PassengerId'], 'Survived': predictions})\n",
    "output.to_csv('predictions_xgb.csv', index=False)\n",
    "\n",
    "print(\"Les prédictions ont été sauvegardées dans le fichier 'predictions_xgb.csv'.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16311369",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d1b554c2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea0b965a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
